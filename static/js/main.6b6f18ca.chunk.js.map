{"version":3,"sources":["Components/NoneditableTable.js","Components/genderCellRenderer.js","Components/countryCellRenderer.js","Components/EditableTable.js","index.js"],"names":["NonEditableTable","props","style","width","height","paddingLeft","paddingRight","marginBottom","id","className","rowData","childdata","defaultColDef","flex","minWidth","field","image","value","imageSource","src","App","useState","gridApi","setGridApi","setGridColumnApi","dummy","setdummy","setRowData","setchilddata","useEffect","localStorage","getItem","undefined","setItem","JSON","stringify","parse","alert","console","log","onClick","data","Id","Name","Email","Gender","DOB","Country","City","e","selectedNodes","getSelectedNodes","filtereddata","length","indexes","i","push","rowIndex","j","includes","stopEditing","editable","rowSelection","singleClickEdit","onGridReady","params","api","columnApi","onCellValueChanged","event","rowVal","rowIdx","components","datePicker","Datepicker","prototype","init","this","eInput","document","createElement","classList","add","window","jQuery","datepicker","dateFormat","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","getDatePicker","frameworkComponents","genderCellRenderer","GenderCellRenderer","CountryCellRenderer","cellRenderer","cellEditor","cellEditorParams","values","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6b6f18ca.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-enterprise\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\n\r\nconst NonEditableTable = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        paddingLeft: \"50px\",\r\n        paddingRight: \"50px\",\r\n        marginBottom: \"10px\",\r\n      }}\r\n    >\r\n      <div\r\n        id=\"myGrid\"\r\n        style={{\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n        }}\r\n        className=\"ag-theme-alpine\"\r\n      >\r\n        <div className=\"ag-theme-alpine\" style={{ height: 300, width: \"100%\" }}>\r\n          <h4>Submitted Data</h4>\r\n\r\n          <AgGridReact\r\n            rowData={props.childdata}\r\n            defaultColDef={{\r\n              flex: 1,\r\n              minWidth: 100,\r\n            }}\r\n            \r\n          >\r\n            <AgGridColumn field=\"Id\"></AgGridColumn>\r\n            <AgGridColumn field=\"Name\"></AgGridColumn>\r\n            <AgGridColumn field=\"Email\"></AgGridColumn>\r\n            <AgGridColumn field=\"Gender\"></AgGridColumn>\r\n            <AgGridColumn field=\"DOB\" ></AgGridColumn>\r\n            <AgGridColumn field=\"Country\"></AgGridColumn>\r\n            <AgGridColumn field=\"City\"></AgGridColumn>\r\n          </AgGridReact>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NonEditableTable;\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const image = props.value === \"Male\" ? \"male.png\" : \"female.png\";\r\n  const imageSource = `https://www.ag-grid.com/example-assets/genders/${image}`;\r\n  return (\r\n    <span>\r\n      <img src={imageSource} />\r\n      {props.value}\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const image = props.value === \"Indonesia\" ? \"male.png\" : \"female.png\";\r\n  const imageSource = `https://www.ag-grid.com/example-assets/genders/${image}`;\r\n  return (\r\n    <span>\r\n      <img src={imageSource} />\r\n      {props.value}\r\n    </span>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-enterprise\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport NonediatableTable from \"./NoneditableTable\";\r\nimport \"./Editable.css\";\r\nimport GenderCellRenderer from \"./genderCellRenderer.js\";\r\nimport CountryCellRenderer from \"./countryCellRenderer\";\r\n\r\nconst App = () => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const [dummy, setdummy] = useState(\"\");\r\n\r\n  const [rowData, setRowData] = useState(\"\");\r\n  const [childdata, setchilddata] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      localStorage.getItem(\"data\") == null ||\r\n      localStorage.getItem(\"data\") == undefined\r\n    ) {\r\n      localStorage.setItem(\"data\", JSON.stringify([]));\r\n      setRowData(JSON.parse(localStorage.getItem(\"data\")));\r\n    } else {\r\n      setRowData(JSON.parse(localStorage.getItem(\"data\")));\r\n      setchilddata(JSON.parse(localStorage.getItem(\"data\")));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (dummy) {\r\n      localStorage.setItem(\"data\", JSON.stringify(rowData));\r\n      setdummy(\"\");\r\n      setchilddata(JSON.parse(localStorage.getItem(\"data\")));\r\n      alert(\"submitted\")\r\n    }\r\n  }, [dummy]);\r\n\r\n  const deleteselectedRows = (e) => {\r\n    const selectedNodes = gridApi.getSelectedNodes();\r\n\r\n    let data = [...rowData];\r\n    let filtereddata = [];\r\n    if (selectedNodes) {\r\n      if (selectedNodes.length > 0) {\r\n        let indexes = [];\r\n        for (var i = 0; i < selectedNodes.length; i++) {\r\n          indexes.push(selectedNodes[i].rowIndex);\r\n        }\r\n\r\n        for (var j = 0; j < data.length; j++) {\r\n          if (!indexes.includes(j)) {\r\n            filtereddata.push(data[j]);\r\n          }\r\n        }\r\n\r\n        setRowData(filtereddata);\r\n        console.log(filtereddata);\r\n      }\r\n    }\r\n  };\r\n  console.log(rowData);\r\n\r\n  const deletenonselectedRows = (e) => {\r\n    const selectedNodes = gridApi.getSelectedNodes();\r\n\r\n    let data = [...rowData];\r\n    let filtereddata = [];\r\n\r\n    if (selectedNodes) {\r\n      console.log(\"here\");\r\n      if (selectedNodes.length > 0) {\r\n        console.log(\"here\");\r\n        let indexes = [];\r\n        for (var i = 0; i < selectedNodes.length; i++) {\r\n          indexes.push(selectedNodes[i].rowIndex);\r\n        }\r\n\r\n        for (var j = 0; j < data.length; j++) {\r\n          if (indexes.includes(j)) {\r\n            filtereddata.push(data[j]);\r\n          }\r\n        }\r\n\r\n        setRowData(filtereddata);\r\n        console.log(filtereddata);\r\n      } else {\r\n        console.log(\"here\");\r\n        setRowData([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    gridApi.stopEditing();\r\n    setdummy(\"some\");\r\n  };\r\n\r\n  const addrowHandler = () => {\r\n    let data = [\r\n      ...rowData,\r\n      {\r\n        Id: \"\",\r\n        Name: \"\",\r\n        Email: \"\",\r\n        Gender: \"\",\r\n        DOB: \"\",\r\n        Country: \"\",\r\n        City: \"\",\r\n      },\r\n    ];\r\n    setRowData(data);\r\n  };\r\n\r\n  const onGridReady = (params) => {\r\n    console.log(params);\r\n    console.log(params.api);\r\n    console.log(params.columnApi);\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n  };\r\n\r\n  const onCellValueChanged = (event) => {\r\n    let rowVal = event.data;\r\n    let rowIdx = event.rowIndex;\r\n    let data = [...rowData];\r\n    for (var i = 0; i < data.length; i++) {\r\n      data[rowIdx] = rowVal;\r\n    }\r\n\r\n    setRowData(data);\r\n  };\r\n\r\n  function getDatePicker() {\r\n    function Datepicker() {}\r\n    Datepicker.prototype.init = function (params) {\r\n      this.eInput = document.createElement(\"input\");\r\n      this.eInput.value = params.value;\r\n      this.eInput.classList.add(\"ag-input\");\r\n      this.eInput.style.height = \"100%\";\r\n      window.jQuery(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n    };\r\n    Datepicker.prototype.getGui = function () {\r\n      return this.eInput;\r\n    };\r\n    Datepicker.prototype.afterGuiAttached = function () {\r\n      this.eInput.focus();\r\n      this.eInput.select();\r\n    };\r\n    Datepicker.prototype.getValue = function () {\r\n      return this.eInput.value;\r\n    };\r\n    Datepicker.prototype.destroy = function () {};\r\n    Datepicker.prototype.isPopup = function () {\r\n      return false;\r\n    };\r\n    return Datepicker;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          paddingLeft: \"50px\",\r\n          paddingRight: \"50px\",\r\n        }}\r\n      >\r\n        <div\r\n          id=\"myGrid\"\r\n          style={{\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n          }}\r\n          className=\"ag-theme-alpine\"\r\n        >\r\n          <div\r\n            className=\"ag-theme-alpine\"\r\n            style={{ height: 300, width: \"100%\" }}\r\n          >\r\n            <button className=\"buttonstyle\" onClick={addrowHandler}>\r\n              Add Row\r\n            </button>\r\n            <button className=\"buttonstyle\" onClick={deleteselectedRows}>\r\n              Delete Selected Rows\r\n            </button>\r\n            <button className=\"buttonstyle\" onClick={deletenonselectedRows}>\r\n              Delete Non Selected Rows\r\n            </button>\r\n            <button className=\"buttonstyle\" onClick={submitHandler}>\r\n              Submit\r\n            </button>\r\n\r\n            <AgGridReact\r\n              defaultColDef={{\r\n                flex: 1,\r\n                minWidth: 100,\r\n                editable: true,\r\n              }}\r\n              rowSelection=\"multiple\"\r\n              singleClickEdit={true}\r\n              onGridReady={onGridReady}\r\n              rowData={rowData}\r\n              onCellValueChanged={onCellValueChanged}\r\n              components={{ datePicker: getDatePicker() }}\r\n            >\r\n              <AgGridColumn\r\n                field=\"Id\"\r\n                frameworkComponents={{ genderCellRenderer: GenderCellRenderer }}\r\n                frameworkComponents={{\r\n                  CountryCellRenderer: CountryCellRenderer,\r\n                }}\r\n                checkboxSelection={true}\r\n              ></AgGridColumn>\r\n              <AgGridColumn field=\"Name\"></AgGridColumn>\r\n              <AgGridColumn field=\"Email\"></AgGridColumn>\r\n              <AgGridColumn\r\n                field=\"Gender\"\r\n                cellRenderer=\"genderCellRenderer\"\r\n                cellEditor=\"agRichSelectCellEditor\"\r\n                cellEditorParams={{\r\n                  values: [\"Male\", \"Female\"],\r\n                  cellRenderer: \"genderCellRenderer\",\r\n                }}\r\n              ></AgGridColumn>\r\n              <AgGridColumn field=\"DOB\" cellEditor=\"datePicker\"></AgGridColumn>\r\n              <AgGridColumn\r\n                field=\"Country\"\r\n                cellEditor=\"agRichSelectCellEditor\"\r\n                cellEditorParams={{\r\n                  values: [\"Indonesia\", \"Ukraine\"],\r\n                  cellRenderer: \"countryCellRenderer\",\r\n                }}\r\n              ></AgGridColumn>\r\n              <AgGridColumn field=\"City\"></AgGridColumn>\r\n            </AgGridReact>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <NonediatableTable childdata={childdata} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/EditableTable\";\n\n\nReactDOM.render(<App />,document.getElementById(\"root\"))\n"],"sourceRoot":""}